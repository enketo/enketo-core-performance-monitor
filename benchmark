#!/usr/bin/env node

'use strict';

var fs = require( 'fs' );
var path = require( 'path' );
var program = require( 'commander' );
var transformer = require( 'enketo-transformer' );
var phantom = require( 'phantom' );
var graphite = require( 'graphite' );
var config = require( './config.json' );
var client = graphite.createClient( 'plaintext://' + config[ 'graphite url' ] );
var pkg = require( './package.json' );

program
    .version( pkg.version )
    .option( '-a, --all', 'benchmark all forms' )
    .option( '-f, --filename [filename]', 'specific XForm file to benchmark' )
    .parse( process.argv );

if ( program.all ) {
    console.log( '================================================================\nbenchmarking all forms\n================================================================' );

    _getFileNames()
        .then( function( fileNames ) {
            var funcs = fileNames.map( function( filename ) {
                return function() {
                    return _transform( filename )
                        .then( _writeHtmlFile )
                        .then( _render )
                        .then( _send );
                };
            } );
            // run sequentially so they don't influence each other
            return funcs.reduce( function( p, fn ) {
                    return p.then( fn )
                }, Promise.resolve() )
                .then( process.exit );
        } )
        .catch( _logError )
        .then( process.exit );

} else if ( program.filename ) {
    console.log( '================================================================\nbenchmarking %s\n================================================================', program.filename );

    _transform( program.filename )
        .then( _writeHtmlFile )
        .then( _render )
        .then( _send )
        .catch( _logError )
        .then( process.exit );
} else {
    console.log( 'nothing to do' );
}

function _getFileNames() {
    return new Promise( function( resolve, reject ) {
        fs.readdir( path.join( __dirname, 'forms' ), function( err, filenames ) {
            if ( err ) {
                reject( err );
            } else {
                resolve( filenames.filter( function( filename ) {
                    return filename.lastIndexOf( '.xml' ) === filename.length - 4;
                } ) );
            }
        } );
    } );
}

function _transform( filename ) {
    console.log( 'transforming ' + filename + '...' );
    var start = Date.now();
    return _getFileContents( filename )
        .then( transformer.transform )
        .then( function( result ) {
            // add filename without extension
            result.formId = filename.substring( 0, filename.length - 4 );
            result.metrics = {};
            result.metrics.transform = Date.now() - start;
            return result;
        } );
}

function _getFileContents( filename ) {
    var filePath = path.join( __dirname, './forms', filename );

    return new Promise( function( resolve, reject ) {
        fs.readFile( filePath, function( err, xform ) {
            if ( err ) {
                reject( err );
            } else {
                resolve( {
                    xform: xform
                } );
            }
        } );
    } );
}

function _render( survey ) {
    var start = Date.now();

    console.log( 'rendering...' );


    return phantom.create()
        .then( function( ph ) {
            return ph.createPage()
                .then( function( page ) {
                    page.property( 'viewportSize', {
                        width: 1920,
                        height: 1080
                    } );

                    page.on( 'onResourceRequested', true, function( requestData, request ) {
                        if ( /(https?:\/\/)|(livereload\.js)/.test( requestData.url ) ) {
                            request.abort();
                        }
                    } );

                    return page.open( path.join( __dirname, config[ 'enketo core path' ], '/temp/', survey.formId + '.html' ) )
                        .then( function( status ) {
                            survey.metrics.render = Date.now() - start;

                            // save a screenshot, useful to check if the form actually loaded
                            page.render( path.join( __dirname, 'screenshots/' + survey.formId + '.png' ), {
                                format: 'png',
                                quality: '50'
                            } );

                            if ( status === 'success' ) {
                                // add additional metrics
                                return _validate( page )
                                    .then( function( validationTime ) {
                                        survey.metrics.validate = validationTime;
                                        ph.exit();
                                        return survey;
                                    } )
                                    .catch( function( e ) {
                                        ph.exit();
                                    } );
                            } else {
                                ph.exit();
                                throw new Error( 'status: ' + status );
                            }
                        } );
                } );
        } );
}

function _validate( page ) {
    var TIMEOUT = 60 * 1000;
    var start = Date.now();

    console.log( 'validating...' );

    // trigger validation and store validation duration in DOM
    page.evaluate( function() {
        var start = Date.now();
        var formEl = document.querySelector( 'form.or' );

        // use a dirty little trick by detecting the alert shown upon completion
        window.alert = function() {
            formEl.dataset.validationTime = Date.now() - start;
        };

        // start validation
        document.getElementById( 'validate-form' ).click();
    } );

    return new Promise( function( resolve, reject ) {
        var busy = false;
        // make synchronous, because page.evaluate returns right away.
        var check = setInterval( function() {
            if ( !busy ) {
                // for some reason, this function sometimes takes very long to 
                // complete (e.g. in shop.xml)
                busy = true;
                page.evaluate( function() {
                        return document.querySelector( 'form.or' ).dataset.validationTime;
                    } )
                    .then( function( validationTime ) {
                        if ( validationTime || ( Date.now() - start ) > TIMEOUT ) {
                            clearInterval( check );
                            resolve( validationTime );
                        }
                        busy = false;
                    } );
            }
        }, 3 * 1000 );
    } );
}

function _writeHtmlFile( survey ) {
    var filePath = path.join( __dirname, config[ 'enketo core path' ], '/temp', survey.formId + '.html' );

    console.log( 'write to static html file', filePath );

    return new Promise( function( resolve, reject ) {
        _getBaseHtml()
            .then( function( html ) {
                // clean up model to allow it be a javascript variable
                survey.model = survey.model.replace( /\n/g, "" ).replace( /\"/g, "'" );

                html = html.replace( /\/\/\s*{{globalModelStr}}/m, 'var globalModelStr = "' + survey.model + '"' );
                html = html.replace( "<!-- {{<form>}} -->" /*/<!--\s*<form>\s*-->/m*/ , survey.form );

                // write to a temporary html file in the enketo-core folder that has the correct relative resource references
                fs.writeFile( filePath, html, function( err ) {
                    if ( err ) {
                        reject( err );
                    } else {
                        resolve( survey );
                    }
                } );
            } );
    } );
}

function _getBaseHtml() {

    return new Promise( function( resolve, reject ) {
        fs.readFile( path.join( path.join( __dirname, config[ 'enketo core path' ], '/forms/index.html' ) ), function( err, html ) {
            if ( err ) {
                reject( err );
            } else {
                resolve( html.toString() );
            }
        } );
    } );
}

function _send( survey ) {
    var metrics = {};

    metrics[ [ config[ 'data prefix' ] + '.' + survey.formId ] ] = survey.metrics;

    console.log( 'sending data to graphite...', metrics );

    return new Promise( function( resolve, reject ) {
        client.write( metrics, function( err ) {
            if ( err ) {
                reject( err );
            } else {
                console.log( 'sent data successfully!\n----------------------------------------------------------------' );
                resolve();
            }
        } );
    } );
}

function _logError( error ) {
    if ( error.code === 'ENOENT' ) {
        console.error( program.filename + ' could not be found' );
    } else {
        console.error( 'error occurred', error );
    }
}
